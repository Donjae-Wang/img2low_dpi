import argparse
from PIL import Image
import matplotlib.pyplot as plt
from glob import glob
import os
import numpy as np


def img_save(path, dpi=70):
    file_list = os.listdir(path)
    for i in file_list:
        if os.path.isdir(os.path.join(path, i)):
            img_save(os.path.join(path, i))
        else:
            if i.endswith('.png'):
                file_name = os.path.splitext(i)[0]
                img = Image.open(os.path.join(path, i))
                plt.figure(dpi=dpi, figsize=tuple(np.array(img.size)/96/3))
                plt.imshow(img)
                plt.xticks([])
                plt.yticks([])
                ax = plt.subplot()
                ax.spines['top'].set_visible(False)
                ax.spines['right'].set_visible(False)
                ax.spines['bottom'].set_visible(False)
                ax.spines['left'].set_visible(False)
                plt.subplots_adjust(top=1, bottom=0, right=1,
                                    left=0, hspace=0, wspace=0)
                plt.margins(0, 0)
                plt.savefig(f'./preview_low_quality/{file_name}.jpg')
                plt.close()
                print(f'-> {file_name} has been converted to JPG successfully!')

if __name__ == "__main__":
    if not os.path.exists('./preview_low_quality/'):
        os.makedirs('./preview_low_quality/')
    
    try:
        argvs = argparse.ArgumentParser()
        argvs.add_argument('--inpath', '-i', default='./Results/', type=str, help='input path')
        argvs.add_argument('--dpi', '-d', default=100, type=int, help="output jpg's DPI")

        arg_parser = argvs.parse_args()
        dir_in = arg_parser.inpath
        dpi = arg_parser.dpi

        print(f'DPI: {dpi}')
        print(f'Input Directory: {dir_in}')
        img_save(dir_in, dpi=dpi)

    except BaseException as e:
        print(e)
    
